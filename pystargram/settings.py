"""
Django settings for pystargram project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from django.conf.global_settings import MEDIA_ROOT, MEDIA_URL, STATICFILES_DIRS, STATIC_ROOT

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#자 여기서 정리
#static 파일과 media 파일 static파일은 html css 같은거
#media는 그냥 리얼 진짜 파일 ㅋ 두개 사용하는 경로가 다름


#imageField 필드 클래스로 지정하는 upload_to 인자는 항상 이 경로 아래에 위치하게 됨
#그러니 URL은 저걸로 접근하고
#MEDIA_ROOT의 매핑 키임 그러니까 그냥 변수라고 생각하면 됨
#매핑의 과정은 여기서 되는게아니고 urls.py에서 static 메서드가 해준다
MEDIA_URL = '/upload_files/'
#여기서 앞에 지정해준곳에 파일 업로드가 이루어짐!!!이거 또한 중요함
#그러니까 C:\\fileupload2/uploads 여기에 들어간다 이거지
#MEDIA_URL 과 MEDIA_ROOT 를 지정해주지 않으면 기본적으로 프로젝트 안에 업로드가 된다
#이거야
#왜냐하면 저기에있는 저 BASE_DIR이 이 프로젝트의 기본 경로거든
MEDIA_ROOT  = os.path.join('C:\\fileupload2','uploads')
#이 다음 부터의 경로를 모델에 upload_to에 지정해주는 거지

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'o%i*u1q%uaz#2&ua3lxz(@tiy(r9zk)#d%lg^awn!^9m_-xqe*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'photos',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pystargram.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pystargram.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'django_pystar_db',
        'USER': 'django_pystar',
        'PASSWORD': '1234',
        'HOST': 'localhost',
        'PORT': '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

#여기에 있구만 이것이 장고고수
#얘도 똑같이 ROOT 이런거있음

STATIC_URL = '/static/'

#해본 결과 이걸 설정해주지 않으면 기본적으로 앱 안에있는 static 폴더에 있는걸 찾고
#staticfiles_dir를 설정해주면 추가로 여기에 등록이 되어있는 경로에서 까지 찾는다
#그리고 이거 설정해 줄때 ,(콤마)를 써줘서 이게 듀플이란건 알려줘야함
#테스트해보고싶으면 manage.py에서 findstatic 이름
#해보면 찾을 수 있다
#그러니까
#이거랑 static_url 이랑 헷갈리면 안됨
#아시다시피 static_url은 static_root를 참조함 그니까 매핑이지 ㅋ
#static_root는 실 서비스를 위한 거임
#DEVUG =True 가 되어 있으면 static_root 설정은 동작하지 않는다
#보통은 웹서버안에 정적파일 넣어놓고쓰니까 서비스를 위해 씀
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'static'),
    #이런식으로도 가능함
    ('byebye',os.path.join(BASE_DIR, 'static2'),),

)
STATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')
